{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////var/www/html/custom/plugins/shopware-plugin-tags/src/Resources/app/administration/src/module/cogi-tags/page/cogi-tags-detail/cogi-tags-detail.html.twig","webpack:////var/www/html/custom/plugins/shopware-plugin-tags/src/Resources/app/administration/src/module/cogi-tags/page/cogi-tags-list/index.js","webpack:////var/www/html/custom/plugins/shopware-plugin-tags/src/Resources/app/administration/src/module/cogi-tags/page/cogi-tags-detail/index.js","webpack:////var/www/html/custom/plugins/shopware-plugin-tags/src/Resources/app/administration/src/module/cogi-tags/index.js","webpack:////var/www/html/custom/plugins/shopware-plugin-tags/src/Resources/app/administration/src/module/cogi-tags/page/cogi-tags-list/cogi-tags-list.html.twig"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Shopware","Component","Mixin","Criteria","Data","register","template","inject","mixins","getByName","data","showTagDeleteModal","showTagAddModal","toDeleteTagId","newTag","tags","metaInfo","title","this","$createTitle","computed","tagRepository","repositoryFactory","columns","dataIndex","label","$t","routerLink","inlineEdit","allowResize","primary","$tc","created","createdComponent","methods","getList","search","Context","api","then","result","onStartTagDelete","tag","id","onShowTagDeleteModal","onConfirmTagDelete","onCloseTagDeleteModal","delete","createNotificationSuccess","message","catch","exception","createNotificationError","onSaveNewTag","tagCriteria","addFilter","equals","total","item","save","onCloseTagAddModal","onExportToCSV","tagList","forEach","push","csvContent","row","join","rowArray","createdAt","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","onShowTagAddModal","onCancelTagDelete","isLoading","processSuccess","repository","getTag","$route","params","entity","onClickSave","saveFinish","Module","type","description","color","icon","favicon","snippets","deDE","enGB","esES","itIT","nlNL","frFR","routes","list","component","path","detail","meta","parentPath","navigation","parent"],"mappings":"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","file":"static/js/cogi-tags.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/cogitags/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"AkAK\");\n","module.exports = \"{% block cogi_tags_detail %}\\r\\n    <sw-page class=\\\"cogi-tags-detail\\\">\\r\\n        <template slot=\\\"smart-bar-actions\\\">\\r\\n            <sw-button :routerLink=\\\"{ name: 'cogi.tags.list' }\\\">\\r\\n                {{ $t('cogi-tags.detail.cancelButtonText') }}\\r\\n            </sw-button>\\r\\n\\r\\n            <sw-button-process\\r\\n                :isLoading=\\\"isLoading\\\"\\r\\n                :processSuccess=\\\"processSuccess\\\"\\r\\n                variant=\\\"primary\\\"\\r\\n                @process-finish=\\\"saveFinish\\\"\\r\\n                @click=\\\"onClickSave\\\">\\r\\n                {{ $t('cogi-tags.detail.saveButtonText') }}\\r\\n            </sw-button-process>\\r\\n        </template>\\r\\n\\r\\n        <template slot=\\\"content\\\">\\r\\n            <sw-card-view>\\r\\n                <sw-card v-if=\\\"tag\\\" :isLoading=\\\"isLoading\\\">\\r\\n                    <sw-field :label=\\\"$t('cogi-tags.detail.nameLabel')\\\" v-model=\\\"tag.name\\\"></sw-field>\\r\\n                </sw-card>\\r\\n            </sw-card-view>\\r\\n        </template>\\r\\n    </sw-page>\\r\\n{% endblock %}\\r\\n\";","import template from './cogi-tags-list.html.twig';\r\n\r\nconst { Component, Mixin } = Shopware;\r\nconst { Criteria } = Shopware.Data;\r\n\r\nComponent.register('cogi-tags-list', {\r\n    template,\r\n\r\n    inject: [\r\n        'repositoryFactory'\r\n    ],\r\n\r\n    mixins: [\r\n        Mixin.getByName('notification')\r\n    ],\r\n\r\n    data() {\r\n        return {\r\n            showTagDeleteModal: false,\r\n            showTagAddModal: false,\r\n            toDeleteTagId: null,\r\n            newTag: '',\r\n            tags: null\r\n        };\r\n    },\r\n\r\n    metaInfo() {\r\n        return {\r\n            title: this.$createTitle()\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        tagRepository() {\r\n            return this.repositoryFactory.create('tag');\r\n        },\r\n\r\n        columns() {\r\n            return [{\r\n                property: 'name',\r\n                dataIndex: 'name',\r\n                label: this.$t('cogi-tags.list.labelName'),\r\n                routerLink: 'cogi.tags.detail',\r\n                inlineEdit: 'string',\r\n                allowResize: true,\r\n                primary: true\r\n            }, {\r\n                property: 'id',\r\n                dataIndex: 'id',\r\n                routerLink: 'cogi.tags.detail',\r\n                label: this.$tc('cogi-tags.list.id'),\r\n                allowResize: true\r\n            }, {\r\n                property: 'createdAt',\r\n                dataIndex: 'createdAt',\r\n                label: this.$tc('cogi-tags.list.labelCreatedAt'),\r\n                allowResize: true\r\n            }];\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.createdComponent();\r\n    },\r\n\r\n    methods: {\r\n        createdComponent() {\r\n            this.getList();\r\n        },\r\n\r\n        getList() {\r\n            this.tagRepository\r\n                .search(new Criteria(), Shopware.Context.api)\r\n                .then((result) => {\r\n                    this.tags = result;\r\n                });\r\n        },\r\n\r\n        onStartTagDelete(tag) {\r\n            this.toDeleteTagId = tag.id;\r\n            this.onShowTagDeleteModal();\r\n        },\r\n\r\n        onConfirmTagDelete() {\r\n            this.onCloseTagDeleteModal();\r\n\r\n\r\n            this.tagRepository.delete(this.toDeleteTagId, Shopware.Context.api).then(() => {\r\n                this.createNotificationSuccess({\r\n                    title: this.$tc('global.default.success'),\r\n                    message: this.$tc('cogi-tags.list.messageDeleteSuccess')\r\n                });\r\n                this.tagRepository\r\n                    .search(new Criteria(), Shopware.Context.api)\r\n                    .then((result) => {\r\n                        this.tags = result;\r\n                    });\r\n            }).catch((exception) => {\r\n                this.createNotificationError({\r\n                    title: this.$tc('global.default.error'),\r\n                    message: this.$tc('cogi-tags.list.messageDeleteError')\r\n                });\r\n            });\r\n        },\r\n\r\n        onSaveNewTag() {\r\n            const tagCriteria = new Criteria();\r\n            tagCriteria.addFilter(Criteria.equals('name', this.newTag));\r\n\r\n            this.tagRepository\r\n                .search(tagCriteria, Shopware.Context.api)\r\n                .then((result) => {\r\n                    if (result.total > 0) {\r\n                        this.createNotificationError({\r\n                            title: this.$tc('global.default.error'),\r\n                            message: this.$tc('cogi-tags.list.messageAlreadyExistsError')\r\n                        });\r\n                    }\r\n                    else {\r\n                        const item = this.tagRepository.create(Shopware.Context.api);\r\n                        item.name = this.newTag;\r\n                        this.tagRepository.save(item, Shopware.Context.api).then(() => {\r\n                            this.getList();\r\n                            this.onCloseTagAddModal();\r\n\r\n                            this.createNotificationSuccess({\r\n                                title: this.$tc('global.default.success'),\r\n                                message: this.$tc('cogi-tags.list.messageAddedSuccess')\r\n                            });\r\n                        }).catch(() => {\r\n                            this.createNotificationError({\r\n                                title: this.$tc('global.default.error'),\r\n                                message: this.$tc('global.default.error')\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n        },\r\n\r\n        onExportToCSV() {\r\n            let tagList = [];\r\n            this.tags.forEach(function (item) {\r\n                tagList.push(item);\r\n            });\r\n\r\n            let csvContent = \"data:text/csv;charset=utf-8,\";\r\n\r\n            let list = [\"ID\", \"Name\", \"Creation\"];\r\n            let row = list.join(\",\");\r\n            csvContent += row + \"\\r\\n\";\r\n\r\n            tagList.forEach(function (rowArray) {\r\n                let list = [\r\n                    rowArray.id,\r\n                    rowArray.name,\r\n                    rowArray.createdAt\r\n                ];\r\n                let row = list.join(\",\");\r\n                csvContent += row + \"\\r\\n\";\r\n            });\r\n\r\n            let encodedUri = encodeURI(csvContent);\r\n            let link = document.createElement(\"a\");\r\n            link.setAttribute(\"href\", encodedUri);\r\n            link.setAttribute(\"download\", \"tags.csv\");\r\n            document.body.appendChild(link);\r\n\r\n            link.click();\r\n        },\r\n\r\n        onShowTagAddModal() {\r\n            this.showTagAddModal = true;\r\n        },\r\n\r\n        onCloseTagAddModal() {\r\n            this.showTagAddModal = false;\r\n            this.newTag = '';\r\n        },\r\n\r\n        onCancelTagDelete() {\r\n            this.toDeleteTagId = null;\r\n            this.onCloseTagDeleteModal();\r\n        },\r\n\r\n        onShowTagDeleteModal() {\r\n            this.showTagDeleteModal = true;\r\n        },\r\n\r\n        onCloseTagDeleteModal() {\r\n            this.showTagDeleteModal = false;\r\n        }\r\n    }\r\n});\r\n","import template from './cogi-tags-detail.html.twig';\r\n\r\nconst { Component, Mixin } = Shopware;\r\n\r\nComponent.register('cogi-tags-detail', {\r\n    template,\r\n\r\n    inject: [\r\n        'repositoryFactory'\r\n    ],\r\n\r\n    mixins: [\r\n        Mixin.getByName('notification')\r\n    ],\r\n\r\n    metaInfo() {\r\n        return {\r\n            title: this.$createTitle()\r\n        };\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            tag: null,\r\n            isLoading: false,\r\n            processSuccess: false,\r\n            repository: null\r\n        };\r\n    },\r\n\r\n    created() {\r\n        this.repository = this.repositoryFactory.create('tag');\r\n        this.getTag();\r\n    },\r\n\r\n    methods: {\r\n        getTag() {\r\n            this.repository\r\n                .get(this.$route.params.id, Shopware.Context.api)\r\n                .then((entity) => {\r\n                    this.tag = entity;\r\n                });\r\n        },\r\n\r\n        onClickSave() {\r\n            this.isLoading = true;\r\n\r\n            this.repository\r\n                .save(this.tag, Shopware.Context.api)\r\n                .then(() => {\r\n                    this.getTag();\r\n                    this.isLoading = false;\r\n                    this.processSuccess = true;\r\n                }).catch((exception) => {\r\n                    this.isLoading = false;\r\n                    this.createNotificationError({\r\n                        title: this.$t('cogi-tags.detail.errorTitle'),\r\n                        message: exception\r\n                    });\r\n                });\r\n        },\r\n\r\n        saveFinish() {\r\n            this.processSuccess = false;\r\n        }\r\n    }\r\n});\r\n","import './page/cogi-tags-list';\r\nimport './page/cogi-tags-detail';\r\nimport deDE from './snippet/de-DE.json';\r\nimport enGB from './snippet/en-GB.json';\r\nimport esES from './snippet/es-ES.json';\r\nimport itIT from './snippet/it-IT.json';\r\nimport nlNL from './snippet/nl-NL.json';\r\nimport frFR from './snippet/fr-FR.json';\r\n\r\nconst { Module } = Shopware;\r\n\r\nModule.register('cogi-tags', {\r\n    type: 'plugin',\r\n    name: 'Tag',\r\n    title: 'cogi-tags.general.mainMenuItemGeneral',\r\n    description: 'cogi-tags.general.descriptionTextModule',\r\n    color: '#f5be00',\r\n    icon: 'default-action-tags',\r\n    favicon: 'icon-module-settings.png',\r\n\r\n    snippets: {\r\n        'de-DE': deDE,\r\n        'en-GB': enGB,\r\n        'es-ES': esES,\r\n        'it-IT': itIT,\r\n        'nl-NL': nlNL,\r\n        'fr-FR': frFR\r\n    },\r\n\r\n    routes: {\r\n        list: {\r\n            component: 'cogi-tags-list',\r\n            path: 'list'\r\n        },\r\n        detail: {\r\n            component: 'cogi-tags-detail',\r\n            path: 'detail/:id',\r\n            meta: {\r\n                parentPath: 'cogi.tags.list'\r\n            }\r\n        }\r\n    },\r\n\r\n    navigation: [{\r\n        label: 'cogi-tags.general.mainMenuItemGeneral',\r\n        color: '#f5be00',\r\n        path: 'cogi.tags.list',\r\n        icon: 'default-action-tags',\r\n        parent: 'sw-content'\r\n    }]\r\n});\r\n","module.exports = \"{% block cogi_tags_list %}\\r\\n    <sw-page class=\\\"cogi-tags-list\\\">\\r\\n        {% block cogi_tags_list_smart_bar_actions %}\\r\\n        <template slot=\\\"smart-bar-actions\\\">\\r\\n            <sw-button variant=\\\"primary\\\" @click=\\\"onShowTagAddModal()\\\">\\r\\n                {{ $tc('cogi-tags.list.addButtonText') }}\\r\\n            </sw-button>\\r\\n        </template>\\r\\n        {% endblock %}\\r\\n\\r\\n        {% block cogi_tags_list_sidebar %}\\r\\n        <sw-sidebar slot=\\\"sidebar\\\">\\r\\n            <sw-sidebar-item icon=\\\"default-arrow-360-left\\\"\\r\\n                             :title=\\\"$t('cogi-tags.list.refreshButtonText')\\\"\\r\\n                             @click=\\\"getList\\\"></sw-sidebar-item>\\r\\n            </sw-sidebar-item>\\r\\n            <sw-sidebar-item icon=\\\"default-action-circle-download\\\"\\r\\n                             :title=\\\"$t('cogi-tags.list.exportCSVButtonText')\\\"\\r\\n                             @click=\\\"onExportToCSV\\\"></sw-sidebar-item>\\r\\n            </sw-sidebar-item>\\r\\n        </sw-sidebar>\\r\\n        {% endblock %}\\r\\n\\r\\n        <template slot=\\\"content\\\">\\r\\n            {% block cogi_tags_list_content %}\\r\\n                <sw-entity-listing\\r\\n                    v-if=\\\"tags\\\"\\r\\n                    :items=\\\"tags\\\"\\r\\n                    :repository=\\\"tagRepository\\\"\\r\\n                    :showSelection=\\\"false\\\"\\r\\n                    :columns=\\\"columns\\\"\\r\\n                    detailRoute=\\\"cogi.tags.detail\\\">\\r\\n                        <template #column-createdAt=\\\"{item}\\\">\\r\\n                            <span>{{ item.createdAt | date({hour: '2-digit', minute: '2-digit', second: '2-digit'}) }}</span>\\r\\n                        </template>\\r\\n\\r\\n                        {% block cogi_tags_list_actions %}\\r\\n                        <template #actions=\\\"{ item }\\\">\\r\\n                            {% block cogi_tags_list_actions_edit %}\\r\\n                            <sw-context-menu-item\\r\\n                                :routerLink=\\\"{ name: 'cogi.tags.detail', params: { id: item.id } }\\\">\\r\\n                                {{ $tc('cogi-tags.list.contextMenuEdit') }}\\r\\n                            </sw-context-menu-item>\\r\\n                            {% endblock %}\\r\\n\\r\\n                            {% block cogi_tags_list_actions_delete %}\\r\\n                            <sw-context-menu-item variant=\\\"danger\\\"\\r\\n                                                  @click=\\\"onStartTagDelete(item)\\\">\\r\\n                                {{ $tc('cogi-tags.list.contextMenuDelete') }}\\r\\n                            </sw-context-menu-item>\\r\\n                            {% endblock %}\\r\\n                        </template>\\r\\n                        {% endblock %}\\r\\n\\r\\n                        {% block cogi_tags_list_actions_modals %}\\r\\n                        <template #action-modals=\\\"{ item }\\\">\\r\\n                            {% block cogi_tags_list_modal_delete %}\\r\\n                            <sw-modal v-if=\\\"showTagDeleteModal\\\"\\r\\n                                      @modal-close=\\\"onCancelTagDelete\\\"\\r\\n                                      variant=\\\"small\\\"\\r\\n                                      :title=\\\"$tc('cogi-tags.modal.confirmTitle')\\\"\\r\\n                                      class=\\\"cogi-tags-list-modal\\\">\\r\\n                                {% block cogi_tags_list_modal_delete_text %}\\r\\n                                <p>\\r\\n                                    {{ $tc('cogi-tags.modal.confirmText') }}\\r\\n                                </p>\\r\\n                                {% endblock %}\\r\\n\\r\\n                                {% block cogi_tags_list_modal_delete_footer %}\\r\\n                                <template slot=\\\"modal-footer\\\">\\r\\n                                    {% block cogi_tags_list_modal_delete_action_cancel %}\\r\\n                                    <sw-button @click=\\\"onCancelTagDelete\\\" size=\\\"small\\\">\\r\\n                                        {{ $tc('cogi-tags.modal.buttonCancel') }}\\r\\n                                    </sw-button>\\r\\n                                    {% endblock %}\\r\\n\\r\\n                                    {% block cogi_tags_list_modal_delete_action_delete %}\\r\\n                                    <sw-button @click=\\\"onConfirmTagDelete\\\" size=\\\"small\\\" variant=\\\"danger\\\"\\r\\n                                               class=\\\"cogi-tags-list-delete-button\\\">\\r\\n                                        {{ $tc('cogi-tags.modal.buttonDelete') }}\\r\\n                                    </sw-button>\\r\\n                                    {% endblock %}\\r\\n                                </template>\\r\\n                                {% endblock %}\\r\\n                            </sw-modal>\\r\\n                            {% endblock %}\\r\\n                        </template>\\r\\n                        {% endblock %}\\r\\n                </sw-entity-listing>\\r\\n            {% endblock %}\\r\\n\\r\\n            {% block cogi_tags_list_add_modal %}\\r\\n                <sw-modal v-if=\\\"showTagAddModal\\\"\\r\\n                          @modal-close=\\\"onCloseTagAddModal\\\"\\r\\n                          :title=\\\"$t('cogi-tags.list.addButtonText')\\\"\\r\\n                          variant=\\\"default\\\">\\r\\n\\r\\n                    <sw-field v-model=\\\"newTag\\\"\\r\\n                              :label=\\\"$tc('cogi-tags.detail.nameLabel')\\\"\\r\\n                              :placeholder=\\\"$tc('cogi-tags.detail.nameLabel')\\\"\\r\\n                              type=\\\"text\\\">\\r\\n                    </sw-field>\\r\\n\\r\\n                    <template #modal-footer>\\r\\n                        <sw-button @click=\\\"onCloseTagAddModal\\\" size=\\\"small\\\">\\r\\n                            {{ $tc('cogi-tags.modal.buttonCancel') }}\\r\\n                        </sw-button>\\r\\n                        <sw-button @click=\\\"onSaveNewTag\\\"\\r\\n                                   variant=\\\"primary\\\"\\r\\n                                   :disabled=\\\"newTag < 1\\\"\\r\\n                                   size=\\\"small\\\">\\r\\n                            {{ $tc('cogi-tags.detail.saveButtonText') }}\\r\\n                        </sw-button>\\r\\n                    </template>\\r\\n                </sw-modal>\\r\\n            {% endblock %}\\r\\n        </template>\\r\\n    </sw-page>\\r\\n{% endblock %}\\r\\n\";"],"sourceRoot":""}